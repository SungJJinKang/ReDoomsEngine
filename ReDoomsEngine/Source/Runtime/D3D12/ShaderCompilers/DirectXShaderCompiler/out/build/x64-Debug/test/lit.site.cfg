import sys

## Autogenerated by LLVM/Clang configuration.
# Do not edit!
config.host_triple = "x86_64-pc-win32"
config.target_triple = "dxil-ms-dx"
config.llvm_src_root = "$(SolutionDir)Source/Runtime/D3D12/ShaderCompilers/DirectXShaderCompiler"
config.llvm_obj_root = "$(SolutionDir)Source/Runtime/D3D12/ShaderCompilers/DirectXShaderCompiler/out/build/x64-Debug"
config.llvm_tools_dir = "$(SolutionDir)Source/Runtime/D3D12/ShaderCompilers/DirectXShaderCompiler/out/build/x64-Debug/./bin"
config.llvm_lib_dir = "$(SolutionDir)Source/Runtime/D3D12/ShaderCompilers/DirectXShaderCompiler/out/build/x64-Debug/./lib"
config.llvm_shlib_dir = "$(SolutionDir)Source/Runtime/D3D12/ShaderCompilers/DirectXShaderCompiler/out/build/x64-Debug/./bin"
config.llvm_shlib_ext = ".dll"
config.llvm_exe_ext = ".exe"
config.lit_tools_dir = ""
config.python_executable = "C:/Users/hour30000/AppData/Local/Microsoft/WindowsApps/python3.exe"
config.gold_executable = "GOLD_EXECUTABLE-NOTFOUND"
config.ld64_executable = ""
config.ocamlfind_executable = "OCAMLFIND-NOTFOUND"
config.have_ocamlopt = ""
config.have_ocaml_ounit = ""
config.ocaml_flags = ""
config.go_executable = ""
config.enable_shared = 0
config.enable_assertions = 1
config.targets_to_build = " None"
config.llvm_bindings = "".split(' ')
config.host_os = "Windows"
config.host_arch = "AMD64"
config.host_cc = "C:/Program Files/Microsoft Visual Studio/2022/Professional/VC/Tools/MSVC/14.38.33130/bin/Hostx64/x64/cl.exe "
config.host_cxx = "C:/Program Files/Microsoft Visual Studio/2022/Professional/VC/Tools/MSVC/14.38.33130/bin/Hostx64/x64/cl.exe "
config.host_ldflags = "/machine:x64 /STACK:10000000"
config.llvm_use_intel_jitevents = "OFF"
config.llvm_use_sanitizer = ""
config.have_zlib = ""
config.have_dia_sdk = 1
config.enable_ffi = "OFF"

# Support substitution of the tools_dir with user parameters. This is
# used when we can't determine the tool dir at configuration time.
try:
    config.llvm_tools_dir = config.llvm_tools_dir % lit_config.params
    config.llvm_shlib_dir = config.llvm_shlib_dir % lit_config.params
except KeyError:
    e = sys.exc_info()[1]
    key, = e.args
    lit_config.fatal("unable to find %r parameter, use '--param=%s=VALUE'" % (key,key))

# Let the main config do the real work.
lit_config.load_config(config, "$(SolutionDir)Source/Runtime/D3D12/ShaderCompilers/DirectXShaderCompiler/test/lit.cfg")
